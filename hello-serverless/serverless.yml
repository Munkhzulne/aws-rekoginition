service: hello-serverless2
frameworkVersion: '2'
provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
stage: dev
region: ap-southeast-1

iam:
  role: "your lambda role arn"
package:
  exclude:
    - node_modules/**
plugins:
  - serverless-offline
functions:
  presigned:
    handler: presigned.handler
    events:
     - http:
         path: /getPresignedUrl
         method: get
         cors: true
         integration: lambda
  triggerForFace:
    handler: triggerForFace.handler
    events:
      - s3:
          bucket: faceapp-test1
          rules:
            - prefix: faces/
          event: s3:ObjectCreated:*
          existing: true
  triggerForSearch:
    handler: triggerForSearch.handler
    events:
      - http:
          path: /getSimiliarFace
          method: get
          cors: true
          integration: lambda
  # writeAttendance:
  #   handler: handler1.hello
  # create:
  #   handler: create.handler
  # all:
  #   handler: all.handler
  # user:
  #   handler: user.handler
  # userBetween:
  #   handler: userBetween.handler
  # userGame: 
  #   handler: userGame.handler
  # triggerS3:
  #   handler: trigger-s3.handler
  #   event:
  #     - s3: 
  #         bucket: faceapp-test1
  #         rules:
  #           - prefix: uploads/
  #         event: s3:ObjectCreated:*
  #         existing: true
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"    resources: # CloudFormation template syntax from here on.
# resources: 
#   Resources:
#     usersTable:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: usersTable
#         AttributeDefinitions:
#           - AttributeName: email
#             AttributeType: S
#         KeySchema:
#           - AttributeName: email
#             KeyType: HASH
#         ProvisionedThroughput:
#             ReadCapacityUnits: 1
#             WriteCapacityUnits: 1

# resources:
#  Resources:
#      UploadsBucket:
#        Type: 'AWS::S3::Bucket'
#        Properties:
#          BucketName: 'faceapp-test2'